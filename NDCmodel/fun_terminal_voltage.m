% compute terminal voltage Vt
% 1/(Cb+Cs) is assumed to be known
% x(1) = CbCbRb/(Cb+Cs)/(Cb+Cs), x(2) = (Cb+Cs)/Cb/Cs/Rb
% R0 is exponential of Vs
function y = fun_terminal_voltage(x,udata)
global Ic Vsh Qt Vmin
poly = [-3.0338    9.6609    0.1148   -1.1439    2.6867]*1e4;
% y = poly(1)+poly(2)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2))))+...
%     poly(3)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))).^2+ ... 
%     poly(4)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))).^3+ ... 
%     poly(5)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))).^4+ ... 
%     poly(6)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))).^5+ ...
%     Ic*x(3)+Ic*x(4)*exp(-x(5)*(1+1/Qt*Ic*udata/Vsh))+Ic*x(6)*exp(-x(7)*(-1/Qt*Ic*udata/Vsh))+...
%     Ic*x(8)*(1-exp(-udata*x(9)));

y = (poly(1)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))).^2 +...
    poly(2)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))) +...
    Vmin*poly(3))./...
    ((Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))).^3 +...
    poly(4)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))).^2 +...
    poly(5)*(Vsh+1/Qt*Ic*udata+Ic*x(1)*(1-exp(-udata*x(2)))) +...
    poly(3))+...
    Ic*x(3)+Ic*x(4)*exp(-x(5)*(1+1/Qt*Ic*udata/Vsh))+Ic*x(6)*exp(-x(7)*(-1/Qt*Ic*udata/Vsh))+...
    Ic*x(8)*(1-exp(-udata*x(9)));
end